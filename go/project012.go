package main
import ("fmt"
        "math"
        "time"
        "log")

/* The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors? */

func count_factors(num int) int {
  m := map[int]int {}
  count := 1

  // factor all 2's
  for ; num % 2 == 0; num = num / 2 {
    m[2]++
  }
  // check all odd factors up to ceil sqrt of num
  for i := 3; i <= int(math.Sqrt(float64(num))+1); i=i+2 {
    // if factor, recheck all factors, unless factor equals index
    for ; num % i == 0 && i != num; num = num / i {
      m[i]++
    }
  }
  // num is now the last prime factor
  m[num]++

  // calculate number of divisors - d(n)=(a+1)(b+1)(c+1)
  for _, val := range m {
    count = count * ( val + 1 )
  }
  return count
}

func tri_number(num int) int {
  // S = n(n+1) / 2 is converted to n2+n−2S=0. Using quadratic formula, we solve for 1+√(1+8S) / 2
  next := 1 + int(math.Sqrt(float64(1+(8 * num))))
  return num + (next/2)
}

func main() {
  defer TimeTaken(time.Now(), "main()")

  i := 28
  for ; count_factors(i) < 500; i = tri_number(i) {}

  fmt.Println(i)
}

func TimeTaken(t time.Time, name string) {
    elapsed := time.Since(t)
    log.Printf("TIME: %s took %s\n", name, elapsed)
}
